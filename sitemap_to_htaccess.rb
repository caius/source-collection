#!/usr/bin/env ruby
# 
# sitefeed_to_htaccess.rb
#  Takes an XML sitemap and outputs a htaccess redirect for all links
#  See http://swedishcampground.com/sitemap.xml for an example sitemap
#  
# Created by Caius Durling on 2009-07-26.
# Copyright (c) 2009 Caius Durling
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.
# 
# Exit Codes:
#  1 - Didn't enter enough arguments for the script
#  2 - Required libraries not found
#  3 - Invalid URI
# 

unless ARGV.size == 2
  puts %Q{USAGE: ruby sitemap_to_htaccess "<sitemap url>" "<new url>"}
  exit(1)
end

@sitemap_url = ARGV.first
@new_url     = ARGV.last

require "open-uri"
require "rubygems"
begin
  require "nokogiri"
rescue LoadError
  puts "You need to install the nokogiri gem for this script to work."
  puts "`gem install nokogiri` should do the trick."
  exit(2)
end

# Check the URLs are valid
begin
  URI.parse(@sitemap_url)
  URI.parse(@new_url)
rescue URI::InvalidURIError => e
  puts "Invalid URI: #{e.message}"
  exit(3)
end

# Grab the XML
doc = Nokogiri::XML(open(@sitemap_url))
# Setup some bits
@urls = []
@rules = []
@new_url = URI.parse(@new_url)
@match_size = 0

# Parse out the URLs
doc.search("url loc").each do | url |
  @urls << url.content
end

# Replace the URLs with the new ones
# and build a rewrite rule for each URL
@urls.map! do | url |
  # Parse the URL
  url = URI.parse(url)
  # Skip if it's /
  next if ["", "/"].include?(url.path)
  # Replace the host with the new site
  url.host = @new_url.host
  
  match = url.path[/[^\/].*$/]
  
  # So we know how long the longest match is
  @match_size = match.length if (@match_size < match.length)

  match
end.compact.each do | match |
  # Build a RewriteRule and add to the list
  rule = %Q{RewriteRule ^%-#{@match_size+3}s %s/$1 [NC,R=301,L]} % ["(#{match})", @new_url.to_s[/^.*[^\/]/]]
  @rules << rule
end


# Print out the htaccess file
print <<-EOF
# Generated by sitemap_to_htaccess on #{Time.now.to_s}
RewriteEngine On
#{@rules.join("\n")}
EOF
